# Multi-stage build for production API server
FROM node:20-alpine AS base
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@8

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/api/package.json ./packages/api/
COPY packages/core/package.json ./packages/core/
COPY packages/rules/package.json ./packages/rules/
COPY packages/ai/package.json ./packages/ai/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Build stage
FROM base AS builder
COPY . .
RUN pnpm run build

# Production stage
FROM node:20-alpine AS production

# Create non-root user
RUN addgroup -g 1001 -S kubekavach && \
    adduser -S kubekavach -u 1001

# Install production dependencies only
WORKDIR /app
RUN npm install -g pnpm@8

COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/api/package.json ./packages/api/
COPY packages/core/package.json ./packages/core/
COPY packages/rules/package.json ./packages/rules/
COPY packages/ai/package.json ./packages/ai/

RUN pnpm install --frozen-lockfile --prod

# Copy built application
COPY --from=builder /app/packages/api/dist ./packages/api/dist
COPY --from=builder /app/packages/core/dist ./packages/core/dist
COPY --from=builder /app/packages/rules/dist ./packages/rules/dist
COPY --from=builder /app/packages/ai/dist ./packages/ai/dist

# Copy configuration files
COPY --from=builder /app/config ./config

# Set up security
RUN chown -R kubekavach:kubekavach /app
USER kubekavach

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:8080/health', (res) => { \
    if (res.statusCode === 200) process.exit(0); else process.exit(1); \
  }).on('error', () => process.exit(1));"

# Expose port
EXPOSE 8080

# Start the application
CMD ["node", "packages/api/dist/index.js"]